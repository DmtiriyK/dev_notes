# üß© Regex in Python ‚Äî –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ –ø–æ `re`

Python-–º–æ–¥—É–ª—å `re` ‚Äî —Ç–≤–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞, –∑–∞–º–µ–Ω—ã, –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –ª—ë–≥–∫–æ–≥–æ –±–µ–∑—É–º–∏—è.  
–í–æ—Ç –≤—Å—ë, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –≤—Å–ø–æ–º–Ω–∏—Ç—å, –∫–∞–∫ –µ–≥–æ –ø—Ä–∏—Ä—É—á–∏—Ç—å.

---

## üß™ –ë–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏

| –®–∞–±–ª–æ–Ω           | –ó–Ω–∞—á–µ–Ω–∏–µ                              |
|------------------|----------------------------------------|
| `.`              | –õ—é–±–æ–π —Å–∏–º–≤–æ–ª, –∫—Ä–æ–º–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏       |
| `\d`             | –¶–∏—Ñ—Ä–∞ (0‚Äì9)                            |
| `\D`             | –ù–ï —Ü–∏—Ñ—Ä–∞                              |
| `\w`             | –ë—É–∫–≤–∞/—Ü–∏—Ñ—Ä–∞/–ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ              |
| `\W`             | –í—Å—ë, –∫—Ä–æ–º–µ `\w`                        |
| `\s`             | –ü—Ä–æ–±–µ–ª, —Ç–∞–± –∏ —Ç.–ø.                     |
| `\S`             | –ù–ï –ø—Ä–æ–±–µ–ª                             |
| `^`              | –ù–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏                         |
| `$`              | –ö–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏                          |
| `[...]`          | –û–¥–∏–Ω –∏–∑ —Å–∏–º–≤–æ–ª–æ–≤ –≤–Ω—É—Ç—Ä–∏               |
| `[^...]`         | –í—Å—ë, –∫—Ä–æ–º–µ —Å–∏–º–≤–æ–ª–æ–≤ –≤–Ω—É—Ç—Ä–∏            |
| `(a|b)`          | –õ–∏–±–æ `a`, –ª–∏–±–æ `b`                    |
| `*`              | 0 –∏–ª–∏ –±–æ–ª—å—à–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π               |
| `+`              | 1 –∏–ª–∏ –±–æ–ª—å—à–µ                          |
| `?`              | 0 –∏–ª–∏ 1                               |
| `{n}`            | —Ä–æ–≤–Ω–æ `n` —Ä–∞–∑                         |
| `{n,}`           | `n` –∏ –±–æ–ª—å—à–µ                          |
| `{n,m}`          | –æ—Ç `n` –¥–æ `m`                         |

---

## üîß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ `re`:

```python
import re

# –ü–æ–∏—Å–∫ –≤—Å–µ—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
re.findall(r'\d+', text)

# –ó–∞–º–µ–Ω–∞
re.sub(r'old', 'new', text)

# –ó–∞–º–µ–Ω–∞ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π
def replacer(match):
    return str(int(match.group()) * 10)

re.sub(r'\d+', replacer, text)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
re.match(r'^\d+$', string)  # –° —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏
re.search(r'\d+', string)   # –ì–¥–µ —É–≥–æ–¥–Ω–æ

GROUP
match = re.search(r'(\d+)-(\d+)', '123-456')
match.group(0)  # –≤—Å—ë —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: '123-456'
match.group(1)  # –ø–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞: '123'
match.group(2)  # –≤—Ç–æ—Ä–∞—è –≥—Ä—É–ø–ø–∞: '456'

–®–∞–±–ª–æ–Ω	–ó–Ω–∞—á–µ–Ω–∏–µ
(?=...)	–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π lookahead (–ø–æ—Å–ª–µ)
(?!...)	–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π lookahead
(?<=...)	–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π lookbehind (–ø–µ—Ä–µ–¥)
(?<!...)	–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π lookbehind

LAB
import re

text = "I have 5 apples and 0.5 oranges. Code: ....3672"

def multiply(match):
    number = float(match.group())
    return str(number * 10)

pattern = r'\b\d{1,3}(?:\.\d+)?\b'  # –¢–æ–ª—å–∫–æ —á–∏—Å–ª–∞ –¥–æ 3 —Ü–∏—Ñ—Ä
new_text = re.sub(pattern, multiply, text)
print(new_text)
–°–æ–≤–µ—Ç—ã –æ—Ç –±—É–¥—É—â–µ–≥–æ —Ç–µ–±—è:
–í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π —à–∞–±–ª–æ–Ω –Ω–∞ regex101.com

–ï—Å–ª–∏ findall() —Å—Ç—Ä–∞–Ω–Ω–æ —Å–µ–±—è –≤–µ–¥—ë—Ç ‚Äî –ø—Ä–æ–≤–µ—Ä—å —Å–∫–æ–±–∫–∏!

re.sub(..., func, ...) ‚Äî —ç—Ç–æ üî• —Å—É–ø–µ—Ä—Å–∏–ª–∞

–ù–µ –∑–∞–±—ã–≤–∞–π r'' –ø–µ—Ä–µ–¥ —à–∞–±–ª–æ–Ω–æ–º

–ù–µ –±–æ–π—Å—è (?<=...) ‚Äî –±–æ–π—Å—è, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π
